name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  POSTGRES_DB: test_db
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test_password
  REDIS_URL: redis://localhost:6379/0

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Hatch
      run: |
        python -m pip install --upgrade pip
        pip install hatch

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/hatch
        key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        hatch env create dev
        hatch run dev:pip list

    - name: Set up test environment
      run: |
        # Set environment variables for testing
        echo "DATABASE_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}" >> $GITHUB_ENV
        echo "REDIS_URL=${{ env.REDIS_URL }}" >> $GITHUB_ENV
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV
        echo "TERM=dumb" >> $GITHUB_ENV
        echo "NO_COLOR=1" >> $GITHUB_ENV
        echo "TEXTUAL_HEADLESS=1" >> $GITHUB_ENV

    - name: Wait for services
      run: |
        # Wait for PostgreSQL
        until pg_isready -h localhost -p 5432 -U ${{ env.POSTGRES_USER }}; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
        # Wait for Redis
        until redis-cli -h localhost -p 6379 ping; do
          echo "Waiting for Redis..."
          sleep 2
        done

    - name: Run linting
      run: |
        hatch run dev:ruff check .
        hatch run dev:ruff format --check .

    - name: Run type checking
      run: |
        hatch run dev:mypy src/

    - name: Run security scan
      run: |
        hatch run dev:bandit -r src/
      continue-on-error: true

    - name: Run unit tests
      run: |
        hatch run dev:pytest tests/unit/ -v --tb=short

    - name: Run TUI tests
      run: |
        hatch run dev:pytest -m tui -v --tb=short --timeout=30

    - name: Run integration tests
      run: |
        hatch run dev:pytest tests/integration/ -v --tb=short --timeout=60

    - name: Run end-to-end tests
      run: |
        hatch run dev:pytest tests/e2e/ -v --tb=short --timeout=120

    - name: Run performance tests
      run: |
        hatch run dev:pytest tests/performance/ -v --tb=short --timeout=180
      continue-on-error: true

    - name: Run accessibility tests
      run: |
        hatch run dev:pytest tests/accessibility/ -v --tb=short

    - name: Run all tests with coverage
      run: |
        hatch run dev:pytest --cov=src --cov-report=xml --cov-report=html --cov-fail-under=80

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Hatch
      run: |
        python -m pip install --upgrade pip
        pip install hatch

    - name: Run pre-commit hooks
      run: |
        hatch run dev:pre-commit run --all-files

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Hatch
      run: |
        python -m pip install --upgrade pip
        pip install hatch

    - name: Run security checks
      run: |
        hatch run dev:bandit -r src/ -f json -o bandit-report.json
        hatch run dev:safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-and-test-docker:
    runs-on: ubuntu-latest
    needs: [test, lint-and-format]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t fastapi-clean-example:${{ github.sha }} .

    - name: Test Docker image
      run: |
        # Start services
        docker-compose -f docker-compose.test.yml up -d
        
        # Wait for services to be ready
        sleep 30
        
        # Run health checks
        docker-compose -f docker-compose.test.yml exec -T app curl -f http://localhost:8000/health || exit 1
        
        # Clean up
        docker-compose -f docker-compose.test.yml down

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-test-docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-test-docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here

